
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -f -q -o basic.bin -L basic.lst ..\source\start.asm
; Wed Jun 05 00:09:43 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\start.asm

.0000	18		clc			clc												; switch into 65816 16 bit mode.
.0001	fb		xce			xce
.0002	c2 30		rep #$30		rep 	#$30
.0004	a2 f0 ff	ldx #$fff0		ldx 	#$FFF0 									; 6502 stack at $FFE0
.0007	9a		txs			txs
.0008	a9 00 fe	lda #$fe00		lda 	#$FE00 									; set DP to $FE00
.000b	5b		tcd			tcd
.000c	a9 02 00	lda #$0002		lda 	#CodeSpace >> 16 						; put the page number in A ($2)
.000f	a2 00 40	ldx #$4000		ldx 	#CodeSpace & $FFFF 						; and the base address in X ($4000)
.0012	a0 00 c0	ldy #$c000		ldy 	#CodeEndSpace & $FFFF					; and the end address in Y ($C000)
.0015	5c 44 04 01	jmp $010444		jmp 	SwitchBasicInstance

;******  Processing file: ..\source\basic.asm

.010000					StartOfBasicCode:

;******  Processing file: ..\source\temp/tokens.inc

.010000					CommandJumpTable:
>010000	c8 01					.word IllegalToken & $FFFF ; for the $0000 token.
>010002	41 02					.word Binary_And               & $FFFF ; token $4001 "&"
>010004	4e 02					.word Binary_Or                & $FFFF ; token $4002 "|"
>010006	5b 02					.word Binary_Xor               & $FFFF ; token $4003 "^"
>010008	84 02					.word Binary_Less              & $FFFF ; token $4404 "<"
>01000a	c7 02					.word Binary_Greater           & $FFFF ; token $4405 ">"
>01000c	68 02					.word Binary_Equals            & $FFFF ; token $4406 "="
>01000e	b5 02					.word Binary_LessEqual         & $FFFF ; token $4407 "<="
>010010	a3 02					.word Binary_GreaterEqual      & $FFFF ; token $4408 ">="
>010012	76 02					.word Binary_NotEquals         & $FFFF ; token $4409 "<>"
>010014	07 02					.word Binary_Add               & $FFFF ; token $480a "+"
>010016	15 02					.word Binary_Subtract          & $FFFF ; token $480b "-"
>010018	60 03					.word Binary_Multiply          & $FFFF ; token $4c0c "*"
>01001a	e0 02					.word Binary_Divide            & $FFFF ; token $4c0d "/"
>01001c	54 03					.word Binary_Modulus           & $FFFF ; token $4c0e "%"
>01001e	23 02					.word Binary_ShiftRight        & $FFFF ; token $4c0f ">>"
>010020	32 02					.word Binary_ShiftLeft         & $FFFF ; token $4c10 "<<"
>010022	c8 01					.word IllegalToken             & $FFFF ; token $5011 "?"
>010024	c8 01					.word IllegalToken             & $FFFF ; token $5012 "!"
>010026	c8 01					.word IllegalToken             & $FFFF ; token $5013 "$"
>010028	10 04					.word Function_Random          & $FFFF ; token $7414 "rnd()"
>01002a	f0 03					.word Function_Sgn             & $FFFF ; token $7415 "sgn("
>01002c	cc 03					.word Function_Abs             & $FFFF ; token $7416 "abs("
>01002e	91 03					.word Function_Len             & $FFFF ; token $7417 "len("
>010030	c8 01					.word IllegalToken             & $FFFF ; token $7818 ","
>010032	c8 01					.word IllegalToken             & $FFFF ; token $7819 ";"
>010034	c8 01					.word IllegalToken             & $FFFF ; token $781a ":"
>010036	c8 01					.word IllegalToken             & $FFFF ; token $781b "("
>010038	c8 01					.word IllegalToken             & $FFFF ; token $781c ")"
>01003a	c8 01					.word IllegalToken             & $FFFF ; token $781d "#"
>01003c	c8 01					.word IllegalToken             & $FFFF ; token $7c1e "let"
.01003e					TokenText:
>01003e	02 26					 .text $02,"&"        ; token $4001
>010040	02 7c					 .text $02,"|"        ; token $4002
>010042	02 5e					 .text $02,"^"        ; token $4003
>010044	12 3c					 .text $12,"<"        ; token $4404
>010046	12 3e					 .text $12,">"        ; token $4405
>010048	12 3d					 .text $12,"="        ; token $4406
>01004a	13 3c 3d				 .text $13,"<="       ; token $4407
>01004d	13 3e 3d				 .text $13,">="       ; token $4408
>010050	13 3c 3e				 .text $13,"<>"       ; token $4409
>010053	22 2b					 .text $22,"+"        ; token $480a
>010055	22 2d					 .text $22,"-"        ; token $480b
>010057	32 2a					 .text $32,"*"        ; token $4c0c
>010059	32 2f					 .text $32,"/"        ; token $4c0d
>01005b	32 25					 .text $32,"%"        ; token $4c0e
>01005d	33 3e 3e				 .text $33,">>"       ; token $4c0f
>010060	33 3c 3c				 .text $33,"<<"       ; token $4c10
>010063	42 3f					 .text $42,"?"        ; token $5011
>010065	42 21					 .text $42,"!"        ; token $5012
>010067	42 24					 .text $42,"$"        ; token $5013
>010069	d6 72 6e 64 28 29			 .text $d6,"rnd()"    ; token $7414
>01006f	d5 73 67 6e 28				 .text $d5,"sgn("     ; token $7415
>010074	d5 61 62 73 28				 .text $d5,"abs("     ; token $7416
>010079	d5 6c 65 6e 28				 .text $d5,"len("     ; token $7417
>01007e	e2 2c					 .text $e2,","        ; token $7818
>010080	e2 3b					 .text $e2,";"        ; token $7819
>010082	e2 3a					 .text $e2,":"        ; token $781a
>010084	e2 28					 .text $e2,"("        ; token $781b
>010086	e2 29					 .text $e2,")"        ; token $781c
>010088	e2 23					 .text $e2,"#"        ; token $781d
>01008a	f4 6c 65 74				 .text $f4,"let"      ; token $7c1e
>01008e	00					.byte $00
=$4001					ampersandTokenID                 = $4001
=$4002					barTokenID                       = $4002
=$4003					hatTokenID                       = $4003
=$4404					lessTokenID                      = $4404
=$4405					greaterTokenID                   = $4405
=$4406					equalTokenID                     = $4406
=$4407					lessequalTokenID                 = $4407
=$4408					greaterequalTokenID              = $4408
=$4409					lessgreaterTokenID               = $4409
=$480a					plusTokenID                      = $480a
=$480b					minusTokenID                     = $480b
=$4c0c					starTokenID                      = $4c0c
=$4c0d					slashTokenID                     = $4c0d
=$4c0e					percentTokenID                   = $4c0e
=$4c0f					greatergreaterTokenID            = $4c0f
=$4c10					lesslessTokenID                  = $4c10
=$5011					questionTokenID                  = $5011
=$5012					plingTokenID                     = $5012
=$5013					dollarTokenID                    = $5013
=$7414					rndlparenrparenTokenID           = $7414
=$7415					sgnlparenTokenID                 = $7415
=$7416					abslparenTokenID                 = $7416
=$7417					lenlparenTokenID                 = $7417
=$7818					commaTokenID                     = $7818
=$7819					semicolonTokenID                 = $7819
=$781a					colonTokenID                     = $781a
=$781b					lparenTokenID                    = $781b
=$781c					rparenTokenID                    = $781c
=$781d					hashTokenID                      = $781d
=$7c1e					letTokenID                       = $7c1e

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\temp/block.inc

=$0010					BlockFastVariables = $0010
=$0080					BlockHashTable = $0080
=$000f					BlockHashMask = $000f
=$00a0					BlockLowMemoryPtr = $00a0
=$00a2					BlockHighMemoryPtr = $00a2
=$00c0					BlockProgranStart = $00c0

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\data.asm

=$00					DPBaseAddress = $00 						; Base address used for direct page.
=$00					DPageNumber = DPBaseAddress 				; page number of workspace area
=2					DBaseAddress = DPBaseAddress+2 				; low memory for workspace area
=4					DHighAddress = DPBaseAddress+4 				; high memory for workspace area
=6					DCodePtr = DPBaseAddress+6 					; address of code - current token.
=8					DTemp1 = DPBaseAddress + 8 					; *** LONG *** Temporary value
=12					DTemp2 = DPBaseAddress + 12 				; *** LONG *** Temporary value
=16					DSignCount = DPBaseAddress + 16 			; Sign count in division.
=18					DConstantShift = DPBaseAddress + 18 		; Constant Shift
=20					DRandom = DPBaseAddress + 20 				; *** LONG *** Random Seed
=$100					EXSBase = $100 								; Initial value of X at lowest stack level.
=0					EXSValueL = 0 								; Low word
=16					EXSValueH = 16  							; High word
=32					EXSPrecedence = 32							; Precedence

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\expression.asm

.01008f					Evaluate:
.01008f	a2 00 01	ldx #$0100			ldx 	#EXSBase					; reset the stack base
.010092	a9 00 00	lda #$0000			lda 	#0<<10 						; current precedence level.
.010095					EvaluateLevel:
.010095	95 20		sta $20,x			sta 	EXSPrecedence+0,x 				; save precedence level, also sets type to integer.
.010097					_ELGetNext:
.010097	b2 06		lda ($06)			lda 	(DCodePtr)						; look at the next token
.010099	f0 0e		beq $0100a9			beq 	_ELExpressionSyntax 			; EOL token, there's an error.
.01009b	30 28		bmi $0100c5			bmi 	_ELConstant 					; 8000-FFFF constant.
.01009d	c9 00 10	cmp #$1000			cmp 	#$1000 							; string constant ? 00xx
.0100a0	90 0a		bcc $0100ac			bcc 	_ELStringConstant
.0100a2	c9 00 20	cmp #$2000			cmp 	#$2000
.0100a5	90 18		bcc $0100bf			bcc 	_ELConstantShift				; constant shift ? 1xxx
.0100a7	b0 6e		bcs $010117			bcs 	_ELKeywordFunction 				; must be 2000-7FFF e.g. identifier or keyword.
.0100a9					_ELExpressionSyntax:
.0100a9	4c d5 01	jmp $0101d5			jmp 	SyntaxError
.0100ac					_ELStringConstant:
.0100ac	a5 06		lda $06				lda 	DCodePtr 						; get the address of the token
.0100ae	1a		inc a				inc 	a 								; adding 2, start of the string
.0100af	1a		inc a				inc 	a
.0100b0	95 00		sta $00,x			sta 	EXSValueL+0,x 					; the LSB of the string.
.0100b2	a5 00		lda $00				lda 	DPageNumber
.0100b4	95 10		sta $10,x			sta 	EXSValueH+0,x 					; the MSB is the current page number.
.0100b6	18		clc				clc
.0100b7	b2 06		lda ($06)			lda 	(DCodePtr) 						; add length to pointer to skip over
.0100b9	65 06		adc $06				adc 	DCodePtr
.0100bb	85 06		sta $06				sta 	DCodePtr
.0100bd	80 1b		bra $0100da			bra 	_ELGotAtom
.0100bf					_ELConstantShift:
.0100bf	85 12		sta $12				sta 	DConstantShift 					; update constant shift
.0100c1	e6 06		inc $06				inc 	DCodePtr 						; shift over constant shift
.0100c3	e6 06		inc $06				inc 	DCodePtr 						; fall through to constant code.
.0100c5					_ELConstant:
.0100c5	b2 06		lda ($06)			lda 	(DCodePtr)						; get the token (for fall through)
.0100c7	0a		asl a				asl 	a 								; shift left, also gets rid of the high bit
.0100c8	95 00		sta $00,x			sta 	EXSValueL+0,x 					; this is the low word
.0100ca	a5 12		lda $12				lda 	DConstantShift 					; get the constant shift
.0100cc	29 ff 0f	and #$0fff			and 	#$0FFF 							; mask off bits 12-15
.0100cf	4a		lsr a				lsr 	a 								; rotate bit 0 into carry
.0100d0	95 10		sta $10,x			sta 	EXSValueH+0,x 					; this is the high word
.0100d2	76 00		ror $00,x			ror 	EXSValueL+0,x 					; rotate carry into the low word
.0100d4	64 12		stz $12				stz 	DConstantShift 					; reset the constant shift to zero.
.0100d6	e6 06		inc $06				inc 	DCodePtr 						; skip over code pointer
.0100d8	e6 06		inc $06				inc 	DCodePtr
.0100da					_ELGotAtom:
.0100da	b2 06		lda ($06)			lda 	(DCodePtr)						; get the next token.
.0100dc	a8		tay				tay 									; save in Y, temporarily.
.0100dd	29 00 f0	and #$f000			and 	#$F000 							; is it a binary operator keyword, 010x xxxx xxxx xxxx
.0100e0	c9 00 40	cmp #$4000			cmp 	#$4000
.0100e3	d0 2d		bne $010112			bne 	_ELExit 						; no, exit.
.0100e5	98		tya				tya 									; get token back
.0100e6	29 00 3c	and #$3c00			and 	#15<<10 						; mask out the precedence data.
.0100e9	d5 20		cmp $20,x			cmp 	EXSPrecedence,x					; compare against current level
.0100eb	90 25		bcc $010112			bcc 	_ELExit 						; if too low, then exit back.
.0100ed	5a		phy				phy 									; save operator token on stack.
.0100ee	e6 06		inc $06				inc 	DCodePtr 						; skip over it
.0100f0	e6 06		inc $06				inc 	DCodePtr
.0100f2	18		clc				clc 									; precedence data still in A, add 1 level to it
.0100f3	69 00 04	adc #$0400			adc 	#1<<10
.0100f6	e8		inx				inx 									; calculate the RHS at the next stack level.
.0100f7	e8		inx				inx
.0100f8	20 95 00	jsr $010095			jsr 	EvaluateLevel
.0100fb	ca		dex				dex
.0100fc	ca		dex				dex
.0100fd	68		pla				pla 									; get operator back
.0100fe					_ELExecuteA:
.0100fe	29 ff 01	and #$01ff			and 	#$01FF 							; keyword ID.
.010101	0a		asl a				asl 	a 								; double it as keyword vector table is word data
.010102	9b		txy				txy 									; save X in Y
.010103	aa		tax				tax 									; double keyword ID in X
.010104	bf 00 00 01	lda $010000,x			lda 	CommandJumpTable,x 				; this is the vector address
.010108	bb		tyx				tyx 									; restore X.
.010109	8f 0e 01 01	sta $01010e			sta 	_ELCallRoutine+1 				; Self modifying, will not work in ROM.
.01010d					_ELCallRoutine:
.01010d	20 0d 01	jsr $01010d			jsr 	_ELCallRoutine
.010110	80 c8		bra $0100da			bra 	_ELGotAtom 						; go round operator level again.
.010112					_ELExit:
.010112	b5 00		lda $00,x			lda 	EXSValueL+0,x 					; put value in YA
.010114	b4 10		ldy $10,x			ldy 	EXSValueH+0,x
.010116	60		rts				rts
.010117					_ELKeywordFunction:
.010117	c9 00 40	cmp #$4000			cmp 	#$4000 							; identifier (e.g. variable) if in range $2000-$3FFF
.01011a	90 30		bcc $01014c			bcc 	_ELVariable 					; (we've already discounted 8000-FFFF)
.01011c	c9 0b 48	cmp #$480b			cmp 	#minusTokenID 					; special case keywords -(atom) (expression) ! ? indirection
.01011f	f0 48		beq $010169			beq 	_ELMinusAtom
.010121	c9 1b 78	cmp #$781b			cmp 	#lparenTokenID
.010124	f0 2b		beq $010151			beq 	_ELParenthesis
.010126	c9 11 50	cmp #$5011			cmp 	#questionTokenID
.010129	f0 57		beq $010182			beq 	_ELByteIndirection
.01012b	c9 12 50	cmp #$5012			cmp 	#plingTokenID
.01012e	f0 69		beq $010199			beq 	_ELWordIndirection
.010130	c9 1d 78	cmp #$781d			cmp 	#hashTokenID 					; # is ignored, it is an instruction to the detokeniser
.010133	f0 10		beq $010145			beq 	_ELIgnoreToken
.010135	a8		tay				tay 									; save token in Y
.010136	29 00 fc	and #$fc00			and 	#$FC00 							; look for 0111 01xx ? i.e. a unary function.
.010139	c9 00 74	cmp #$7400			cmp 	#$7400 							; if it isn't then exit
.01013c	d0 d4		bne $010112			bne 	_ELExit
.01013e					_ELUnaryFunction:
.01013e	e6 06		inc $06				inc 	DCodePtr 						; skip over the unary function token
.010140	e6 06		inc $06				inc 	DCodePtr
.010142	98		tya				tya 									; get token back
.010143	80 b9		bra $0100fe			bra 	_ELExecuteA 					; and execute it.
.010145					_ELIgnoreToken:
.010145	e6 06		inc $06				inc 	DCodePtr 						; skip over the token to ignore
.010147	e6 06		inc $06				inc 	DCodePtr
.010149	82 4b ff	brl $010097			brl 	_ELGetNext
.01014c					_ELVariable:
.01014c	ea		nop				nop
.01014d	ea		nop				nop
.01014e	ea		nop				nop
.01014f	80 89		bra $0100da			bra 	_ELGotAtom
.010151					_ELParenthesis:
.010151	e6 06		inc $06				inc 	DCodePtr 						; skip over the ( token
.010153	e6 06		inc $06				inc 	DCodePtr
.010155	20 b2 01	jsr $0101b2			jsr 	EvaluateNext 					; calculate the value in parenthesis, using next space on the stack.
.010158	a9 1c 78	lda #$781c			lda 	#rparenTokenID 					; check for ) which should close the parenthesised expression.
.01015b	20 ed 01	jsr $0101ed			jsr 	CheckNextToken
.01015e	b5 02		lda $02,x			lda 	EXSValueL+2,x 					; copy the value in directly from level 2 to level 0.
.010160	95 00		sta $00,x			sta 	EXSValueL+0,x
.010162	b5 12		lda $12,x			lda 	EXSValueH+2,x
.010164	95 10		sta $10,x			sta 	EXSValueH+0,x
.010166	82 71 ff	brl $0100da			brl 	_ELGotAtom 						; and go round looking for the next binary operator
.010169					_ELMinusAtom:
.010169	e6 06		inc $06				inc 	DCodePtr 						; skip over the - token
.01016b	e6 06		inc $06				inc 	DCodePtr
.01016d	20 bd 01	jsr $0101bd			jsr 	EvaluateNextAtom
.010170	38		sec				sec 									; do the subtraction
.010171	a9 00 00	lda #$0000			lda 	#0
.010174	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.010176	95 00		sta $00,x			sta 	EXSValueL+0,x
.010178	a9 00 00	lda #$0000			lda 	#0
.01017b	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.01017d	95 10		sta $10,x			sta 	EXSValueH+0,x
.01017f	82 58 ff	brl $0100da			brl 	_ELGotAtom
.010182					_ELByteIndirection:
.010182	e6 06		inc $06				inc 	DCodePtr 						; skip over the - token
.010184	e6 06		inc $06				inc 	DCodePtr
.010186	20 bd 01	jsr $0101bd			jsr 	EvaluateNextAtom
.010189	85 08		sta $08				sta 	DTemp1+0 						; save address to indirect over.
.01018b	84 0a		sty $0a				sty 	DTemp1+2
.01018d	a7 08		lda [$08]			lda 	[DTemp1] 						; read the word there
.01018f	29 ff 00	and #$00ff			and 	#$00FF 							; make a byte
.010192	95 00		sta $00,x			sta 	EXSValueL+0,x 					; write it back
.010194	74 10		stz $10,x			stz 	EXSValueH+0,x
.010196	82 41 ff	brl $0100da			brl 	_ELGotAtom
.010199					_ELWordIndirection:
.010199	e6 06		inc $06				inc 	DCodePtr 						; skip over the - token
.01019b	e6 06		inc $06				inc 	DCodePtr
.01019d	20 bd 01	jsr $0101bd			jsr 	EvaluateNextAtom
.0101a0	85 08		sta $08				sta 	DTemp1+0 						; save address to indirect over.
.0101a2	84 0a		sty $0a				sty 	DTemp1+2
.0101a4	a7 08		lda [$08]			lda 	[DTemp1] 						; read the word there
.0101a6	95 00		sta $00,x			sta 	EXSValueL+0,x 					; write it back
.0101a8	a0 02 00	ldy #$0002			ldy 	#2
.0101ab	b7 08		lda [$08],y			lda 	[DTemp1],y
.0101ad	95 10		sta $10,x			sta 	EXSValueH+0,x
.0101af	82 28 ff	brl $0100da			brl 	_ELGotAtom
.0101b2					EvaluateNext:
.0101b2	e8		inx				inx 									; stack forward
.0101b3	e8		inx				inx
.0101b4	a9 00 00	lda #$0000			lda 	#0<<10 							; lowest precedence.
.0101b7	20 95 00	jsr $010095			jsr 	EvaluateLevel 					; do at next level
.0101ba	ca		dex				dex 									; reset stack
.0101bb	ca		dex				dex
.0101bc	60		rts				rts
.0101bd					EvaluateNextAtom:
.0101bd	e8		inx				inx 									; make space
.0101be	e8		inx				inx
.0101bf	a9 00 20	lda #$2000			lda 	#8<<10 							; means binary operation will be impossible.
.0101c2	20 95 00	jsr $010095			jsr 	EvaluateLevel
.0101c5	ca		dex				dex
.0101c6	ca		dex				dex
.0101c7	60		rts				rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\utility.asm

.0101c8					IllegalToken:
.0101c8	20 e5 01	jsr $0101e5			jsr 	ReportError
>0101cb	42 61 64 20 74 6f 6b 65				.text 	"Bad token",0
>0101d3	6e 00
.0101d5					SyntaxError:
.0101d5	20 e5 01	jsr $0101e5			jsr 	ReportError
>0101d8	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>0101e0	72 72 6f 72 00
.0101e5					ReportError:
.0101e5	c2 30		rep #$30			rep 	#$30 						; in case we changed it.
.0101e7	ea		nop				nop
.0101e8	80 fb		bra $0101e5			bra 	ReportError
.0101ea					CheckNextComma:
.0101ea	a9 18 78	lda #$7818			lda 	#commaTokenID 				; shorthand because comma is used a fair bit.
.0101ed					CheckNextToken:
.0101ed	d2 06		cmp ($06)			cmp 	(DCodePtr) 					; does it match the next token
.0101ef	d0 05		bne $0101f6			bne 	_CTKError					; error if not
.0101f1	e6 06		inc $06				inc 	DCodePtr 					; skip the token
.0101f3	e6 06		inc $06				inc 	DCodePtr
.0101f5	60		rts				rts
.0101f6					_CTKError:
.0101f6	20 e5 01	jsr $0101e5			jsr 	ReportError
>0101f9	4d 69 73 73 69 6e 67 20				.text	"Missing token",0
>010201	74 6f 6b 65 6e 00

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/arithmetic.asm

.010207					Binary_Add:
.010207	18		clc			clc
.010208	b5 00		lda $00,x		lda		EXSValueL+0,x
.01020a	75 02		adc $02,x		adc 	EXSValueL+2,x
.01020c	95 00		sta $00,x		sta 	EXSValueL+0,x
.01020e	b5 10		lda $10,x		lda		EXSValueH+0,x
.010210	75 12		adc $12,x		adc 	EXSValueH+2,x
.010212	95 10		sta $10,x		sta 	EXSValueH+0,x
.010214	60		rts			rts
.010215					Binary_Subtract:
.010215	38		sec			sec
.010216	b5 00		lda $00,x		lda		EXSValueL+0,x
.010218	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.01021a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01021c	b5 10		lda $10,x		lda		EXSValueH+0,x
.01021e	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010220	95 10		sta $10,x		sta 	EXSValueH+0,x
.010222	60		rts			rts
.010223					Binary_ShiftRight:
.010223	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010225	29 3f 00	and #$003f		and 	#63
.010228	f0 07		beq $010231		beq		_Binary_SRExit
.01022a					_Binary_SRLoop:
.01022a	56 10		lsr $10,x		lsr 	EXSValueH+0,x
.01022c	76 00		ror $00,x		ror 	EXSValueL+0,x
.01022e	3a		dec a			dec 	a
.01022f	d0 f9		bne $01022a		bne 	_Binary_SRLoop
.010231					_Binary_SRExit:
.010231	60		rts			rts
.010232					Binary_ShiftLeft:
.010232	b5 02		lda $02,x		lda 	EXSValueL+2,x
.010234	29 3f 00	and #$003f		and 	#63
.010237	f0 07		beq $010240		beq		_Binary_SLExit
.010239					_Binary_SLLoop:
.010239	16 00		asl $00,x		asl 	EXSValueL+0,x
.01023b	36 10		rol $10,x		rol 	EXSValueH+0,x
.01023d	3a		dec a			dec 	a
.01023e	d0 f9		bne $010239		bne 	_Binary_SLLoop
.010240					_Binary_SLExit:
.010240	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/bitwise.asm

.010241					Binary_And:
.010241	b5 00		lda $00,x		lda		EXSValueL+0,x
.010243	35 02		and $02,x		and 	EXSValueL+2,x
.010245	95 00		sta $00,x		sta 	EXSValueL+0,x
.010247	b5 10		lda $10,x		lda		EXSValueH+0,x
.010249	35 12		and $12,x		and 	EXSValueH+2,x
.01024b	95 10		sta $10,x		sta 	EXSValueH+0,x
.01024d	60		rts			rts
.01024e					Binary_Or:
.01024e	b5 00		lda $00,x		lda		EXSValueL+0,x
.010250	15 02		ora $02,x		ora 	EXSValueL+2,x
.010252	95 00		sta $00,x		sta 	EXSValueL+0,x
.010254	b5 10		lda $10,x		lda		EXSValueH+0,x
.010256	15 12		ora $12,x		ora 	EXSValueH+2,x
.010258	95 10		sta $10,x		sta 	EXSValueH+0,x
.01025a	60		rts			rts
.01025b					Binary_Xor:
.01025b	b5 00		lda $00,x		lda		EXSValueL+0,x
.01025d	55 02		eor $02,x		eor 	EXSValueL+2,x
.01025f	95 00		sta $00,x		sta 	EXSValueL+0,x
.010261	b5 10		lda $10,x		lda		EXSValueH+0,x
.010263	55 12		eor $12,x		eor 	EXSValueH+2,x
.010265	95 10		sta $10,x		sta 	EXSValueH+0,x
.010267	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/comparison.asm

.010268					Binary_Equals:
.010268	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.01026a	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01026c	d0 30		bne $01029e		bne 	Compare_Fail
.01026e	b5 10		lda $10,x		lda 	EXSValueH,x
.010270	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010272	d0 2a		bne $01029e		bne 	Compare_Fail
.010274	80 20		bra $010296		bra 	Compare_Succeed
.010276					Binary_NotEquals:
.010276	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric comparison
.010278	d5 02		cmp $02,x		cmp 	EXSValueL+2,x
.01027a	d0 1a		bne $010296		bne 	Compare_Succeed
.01027c	b5 10		lda $10,x		lda 	EXSValueH,x
.01027e	d5 12		cmp $12,x		cmp 	EXSValueH+2,x
.010280	d0 14		bne $010296		bne 	Compare_Succeed
.010282	80 1a		bra $01029e		bra 	Compare_Fail
.010284					Binary_Less:
.010284	38		sec			sec
.010285	b5 00		lda $00,x		lda 	EXSValueL,x 					; signed numeric <
.010287	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010289	b5 10		lda $10,x		lda 	EXSValueH,x
.01028b	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.01028d	50 03		bvc $010292		bvc 	*+5
.01028f	49 00 80	eor #$8000		eor 	#$8000
.010292	30 02		bmi $010296		bmi 	Compare_Succeed
.010294	80 08		bra $01029e		bra 	Compare_Fail
.010296					Compare_Succeed:
.010296	a9 ff ff	lda #$ffff		lda 	#$FFFF
.010299	95 00		sta $00,x		sta 	EXSValueL,x
.01029b	95 10		sta $10,x		sta 	EXSValueH,x
.01029d	60		rts			rts
.01029e					Compare_Fail:
.01029e	74 00		stz $00,x		stz 	EXSValueL,x
.0102a0	74 10		stz $10,x		stz 	EXSValueH,x
.0102a2	60		rts			rts
.0102a3					Binary_GreaterEqual:
.0102a3	38		sec			sec
.0102a4	b5 00		lda $00,x		lda 	EXSValueL,x 					; numeric >= signed
.0102a6	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0102a8	b5 10		lda $10,x		lda 	EXSValueH,x
.0102aa	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0102ac	50 03		bvc $0102b1		bvc 	*+5
.0102ae	49 00 80	eor #$8000		eor 	#$8000
.0102b1	10 e3		bpl $010296		bpl 	Compare_Succeed
.0102b3	80 e9		bra $01029e		bra 	Compare_Fail
.0102b5					Binary_LessEqual:
.0102b5	18		clc			clc 									; numeric <= signed
.0102b6	b5 00		lda $00,x		lda 	EXSValueL,x
.0102b8	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0102ba	b5 10		lda $10,x		lda 	EXSValueH,x
.0102bc	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0102be	50 03		bvc $0102c3		bvc 	*+5
.0102c0	49 00 80	eor #$8000		eor 	#$8000
.0102c3	30 d1		bmi $010296		bmi 	Compare_Succeed
.0102c5	80 d7		bra $01029e		bra 	Compare_Fail
.0102c7					Binary_Greater:
.0102c7	18		clc			clc 									; numeric > signed
.0102c8	b5 00		lda $00,x		lda 	EXSValueL,x
.0102ca	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.0102cc	b5 10		lda $10,x		lda 	EXSValueH,x
.0102ce	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.0102d0	50 03		bvc $0102d5		bvc 	*+5
.0102d2	49 00 80	eor #$8000		eor 	#$8000
.0102d5	10 bf		bpl $010296		bpl 	Compare_Succeed
.0102d7	80 c5		bra $01029e		bra 	Compare_Fail
.0102d9					_BGString:
.0102d9	c9 01 00	cmp #$0001		cmp 	#$0001
.0102dc	f0 b8		beq $010296		beq 	Compare_Succeed
.0102de	80 be		bra $01029e		bra 	Compare_Fail

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/divide.asm

.0102e0					Binary_Divide:
.0102e0	b5 02		lda $02,x		lda 	EXSValueL+2,x						; check for division by zero
.0102e2	15 12		ora $12,x		ora	 	EXSValueH+2,x
.0102e4	d0 14		bne $0102fa		bne 	_BinaryDivide_Ok
.0102e6	20 e5 01	jsr $0101e5		jsr 	ReportError							; error if so.
>0102e9	44 69 76 69 73 69 6f 6e			.text	"Division by zero",$00
>0102f1	20 62 79 20 7a 65 72 6f 00
.0102fa					_BinaryDivide_Ok:
.0102fa	64 08		stz $08			stz 	DTemp1+0							; clear remainder (DTemp)
.0102fc	64 0a		stz $0a			stz 	DTemp1+2
.0102fe	64 10		stz $10			stz 	DSignCount  						; zero sign count.
.010300	5a		phy			phy 										; save Y (bit counter)
.010301	b5 12		lda $12,x		lda 	EXSValueH+2,x 						; check sign of H+2 (right)
.010303	10 07		bpl $01030c		bpl 	_BinaryDivide_RightDone
.010305	e8		inx			inx
.010306	e8		inx			inx
.010307	20 42 03	jsr $010342		jsr 	Binary_DivNegate
.01030a	ca		dex			dex
.01030b	ca		dex			dex
.01030c					_BinaryDivide_RightDone:
.01030c	b5 10		lda $10,x		lda 	EXSValueH+0,x 				 		; check sign of H+0 (left)
.01030e	10 03		bpl $010313		bpl 	_BinaryDivide_LeftDone
.010310	20 42 03	jsr $010342		jsr 	Binary_DivNegate
.010313					_BinaryDivide_LeftDone:
.010313	a0 20 00	ldy #$0020		ldy 	#32 								; number to do.
.010316					_BinaryDivide_Loop:
.010316	16 00		asl $00,x		asl 	EXSValueL+0,x 						; shift Q into carry
.010318	36 10		rol $10,x		rol 	EXSValueH+0,x
.01031a	26 08		rol $08			rol 	DTemp1+0 							; rotate A left, with carry in
.01031c	26 0a		rol $0a			rol 	DTemp1+2
.01031e	38		sec			sec											; calculate A-M
.01031f	a5 08		lda $08			lda 	DTemp1+0 							; but don't save it.
.010321	f5 02		sbc $02,x		sbc 	EXSValueL+2,x
.010323	85 0c		sta $0c			sta 	DTemp2
.010325	a5 0a		lda $0a			lda 	DTemp1+2
.010327	f5 12		sbc $12,x		sbc 	EXSValueH+2,x
.010329	90 08		bcc $010333		bcc 	_Binary_NoSubract 					; if A < M skip this
.01032b	85 0a		sta $0a			sta 	DTemp1+2 							; save the calculated value.
.01032d	a5 0c		lda $0c			lda 	DTemp2
.01032f	85 08		sta $08			sta 	DTemp1+0
.010331	f6 00		inc $00,x		inc 	EXSValueL+0,x						; set bit 0 of Q
.010333					_Binary_NoSubract:
.010333	88		dey			dey 										; do it 32 times.
.010334	d0 e0		bne $010316		bne 	_BinaryDivide_Loop
.010336					_BinaryDivide_Exit:
.010336	a5 10		lda $10			lda 	DSignCount 							; restore sign
.010338	29 01 00	and #$0001		and 	#1
.01033b	f0 03		beq $010340		beq 	_BinaryDivide_Exit2
.01033d	20 42 03	jsr $010342		jsr 	Binary_DivNegate
.010340					_BinaryDivide_Exit2:
.010340	7a		ply			ply 										; restore Y
.010341	60		rts			rts
.010342					Binary_DivNegate:
.010342	e6 10		inc $10			inc 	DSignCount 							; increment the count of signs.
.010344	38		sec			sec 										; negate the value at stack X.
.010345	a9 00 00	lda #$0000		lda 	#$0000
.010348	f5 00		sbc $00,x		sbc 	EXSValueL+0,x
.01034a	95 00		sta $00,x		sta 	EXSValueL+0,x
.01034c	a9 00 00	lda #$0000		lda 	#$0000
.01034f	f5 10		sbc $10,x		sbc 	EXSValueH+0,x
.010351	95 10		sta $10,x		sta 	EXSValueH+0,x
.010353	60		rts			rts
.010354					Binary_Modulus:
.010354	20 e0 02	jsr $0102e0		jsr 	Binary_Divide 						; do the divide
.010357	a5 08		lda $08			lda 	DTemp1+0 							; copy modulus into data area.
.010359	95 00		sta $00,x		sta 	EXSValueL+0,x
.01035b	a5 0a		lda $0a			lda 	DTemp1+2
.01035d	95 10		sta $10,x		sta 	EXSValueH+0,x
.01035f	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\binary/multiply.asm

.010360					Binary_Multiply:
.010360	b5 00		lda $00,x		lda 	EXSValueL+0,x 						; multiplier to DTemp1, multiplicand in Value+2
.010362	85 08		sta $08			sta 	DTemp1
.010364	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010366	85 0a		sta $0a			sta		DTemp1+2
.010368	74 00		stz $00,x		stz 	EXSValueL+0,x						; zero result
.01036a	74 10		stz $10,x		stz 	EXSValueH+0,x
.01036c					_BinaryMultiply_Loop:
.01036c	a5 08		lda $08			lda 	DTemp1 								; multiplier zero then exit
.01036e	05 0a		ora $0a			ora 	DTemp1+2
.010370	f0 1e		beq $010390		beq 	_BinaryMultiply_Exit
.010372	a5 08		lda $08			lda 	DTemp1 								; check bit 0 of multiplier
.010374	29 01 00	and #$0001		and 	#1
.010377	f0 0d		beq $010386		beq 	_BinaryMultiply_NoAdd
.010379	18		clc			clc 										; add multiplicand to result.
.01037a	b5 00		lda $00,x		lda 	EXSValueL+0,x
.01037c	75 02		adc $02,x		adc 	EXSValueL+2,x
.01037e	95 00		sta $00,x		sta 	EXSValueL+0,x
.010380	b5 10		lda $10,x		lda 	EXSValueH+0,x
.010382	75 12		adc $12,x		adc 	EXSValueH+2,x
.010384	95 10		sta $10,x		sta 	EXSValueH+0,x
.010386					_BinaryMultiply_NoAdd:
.010386	46 0a		lsr $0a			lsr 	DTemp1+2 							; halve multiplier
.010388	66 08		ror $08			ror 	DTemp1
.01038a	16 02		asl $02,x		asl 	EXSValueL+2,x 						; double multiplicand
.01038c	36 12		rol $12,x		rol 	EXSValueH+2,x
.01038e	80 dc		bra $01036c		bra 	_BinaryMultiply_Loop 				; go round again.
.010390					_BinaryMultiply_Exit:
.010390	60		rts			rts

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\unary/simpleunary.asm

.010391					Function_Len:
.010391	20 b2 01	jsr $0101b2			jsr 	EvaluateNext 				; get the value you are absoluting
.010394	85 08		sta $08				sta 	DTemp1 						; save address
.010396	84 0a		sty $0a				sty 	DTemp1+2
.010398	a9 1c 78	lda #$781c			lda 	#RParenTokenID 				; check )
.01039b	20 ed 01	jsr $0101ed			jsr 	CheckNextToken
.01039e	a0 00 00	ldy #$0000			ldy 	#0
.0103a1					_FLenFindEnt:
.0103a1	b7 08		lda [$08],y			lda 	[DTemp1],y 					; read the next character
.0103a3	29 ff 00	and #$00ff			and 	#$00FF 						; look at LSB only
.0103a6	f0 1f		beq $0103c7			beq 	_FLEndFound
.0103a8	c8		iny				iny 								; do 64k maximum
.0103a9	d0 f6		bne $0103a1			bne 	_FLenFindEnt
.0103ab	20 e5 01	jsr $0101e5			jsr 	ReportError
>0103ae	4c 65 6e 28 29 20 75 73				.text 	"Len() used on non string",0
>0103b6	65 64 20 6f 6e 20 6e 6f 6e 20 73 74 72 69 6e 67
>0103c6	00
.0103c7					_FLEndFound:
.0103c7	94 00		sty $00,x			sty 	EXSValueL+0,x 				; save length.
.0103c9	74 10		stz $10,x			stz 	EXSValueH+0,x
.0103cb	60		rts				rts
.0103cc					Function_Abs:
.0103cc	20 b2 01	jsr $0101b2			jsr 	EvaluateNext 				; get the value you are absoluting
.0103cf	a9 1c 78	lda #$781c			lda 	#RParenTokenID 				; check )
.0103d2	20 ed 01	jsr $0101ed			jsr 	CheckNextToken
.0103d5	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from the upper word.
.0103d7	30 07		bmi $0103e0			bmi 	_FAbsNegative 				; negate it if negative
.0103d9	95 10		sta $10,x			sta 	EXSValueH+0,x 				; otherwise just copy it.
.0103db	b5 02		lda $02,x			lda 	EXSValueL+2,x
.0103dd	95 00		sta $00,x			sta 	EXSValueL+0,x
.0103df	60		rts				rts
.0103e0					_FAbsNegative:
.0103e0	38		sec				sec 								; copy 0 - 2nd stack => 1st stack.
.0103e1	a9 00 00	lda #$0000			lda 	#0
.0103e4	f5 02		sbc $02,x			sbc 	EXSValueL+2,x
.0103e6	95 00		sta $00,x			sta 	EXSValueL+0,x
.0103e8	a9 00 00	lda #$0000			lda 	#0
.0103eb	f5 12		sbc $12,x			sbc 	EXSValueH+2,x
.0103ed	95 10		sta $10,x			sta 	EXSValueH+0,x
.0103ef	60		rts				rts
.0103f0					Function_Sgn:
.0103f0	20 b2 01	jsr $0101b2			jsr 	EvaluateNext 				; get an integer
.0103f3	a9 1c 78	lda #$781c			lda 	#RParenTokenID 				; check )
.0103f6	20 ed 01	jsr $0101ed			jsr 	CheckNextToken
.0103f9	74 00		stz $00,x			stz 	EXSValueL+0,x 				; zero the result
.0103fb	74 10		stz $10,x			stz 	EXSValueH+0,x
.0103fd	b5 12		lda $12,x			lda 	EXSValueH+2,x 				; get sign of result from high bit of upper wod.
.0103ff	30 07		bmi $010408			bmi 	_FSgnNegative 				; set to -1 if signed
.010401	15 02		ora $02,x			ora 	EXSValueL+2,x 				; exit if zero as we already reset it.
.010403	f0 02		beq $010407			beq 	_FSgnExit
.010405	f6 00		inc $00,x			inc 	EXSValueL+0,x 				; > 0 so make result 1 if positive and non-zero
.010407					_FSgnExit:
.010407	60		rts				rts
.010408					_FSgnNegative:
.010408	a9 ff ff	lda #$ffff			lda 	#$FFFF 						; set the return value to -1 as negative.
.01040b	95 00		sta $00,x			sta 	EXSValueL+0,x
.01040d	95 10		sta $10,x			sta 	EXSValueH+0,x
.01040f	60		rts				rts
.010410					Function_Random:
.010410	a5 14		lda $14				lda 	DRandom 					; check for non-zero
.010412	05 16		ora $16				ora 	DRandom+2 					; they don't like these :)
.010414	d0 0a		bne $010420			bne 	_Rnd_NotZero
.010416	a9 b7 00	lda #$00b7			lda 	#$B7 						; initialise it to the same value.
.010419	85 14		sta $14				sta 	DRandom
.01041b	a9 d5 00	lda #$00d5			lda 	#$D5
.01041e	85 16		sta $16				sta 	DRandom+2
.010420					_Rnd_NotZero:
.010420	20 2b 04	jsr $01042b			jsr 	_Rnd_Process 				; call randomiser twice
.010423	95 10		sta $10,x			sta 	EXSValueH+0,x
.010425	20 2b 04	jsr $01042b			jsr 	_Rnd_Process
.010428	95 00		sta $00,x			sta 	EXSValueL+0,x
.01042a	60		rts				rts
.01042b					_Rnd_Process:
.01042b	06 14		asl $14				asl 	DRandom 					; shift right, exit
.01042d	26 16		rol $16				rol 	DRandom+2
.01042f	90 0e		bcc $01043f			bcc 	_Rnd_Exit
.010431	a5 14		lda $14				lda 	DRandom 					; taps effectively
.010433	49 54 d4	eor #$d454			eor 	#$D454
.010436	85 14		sta $14				sta 	DRandom
.010438	a5 16		lda $16				lda 	DRandom+2
.01043a	49 d5 55	eor #$55d5			eor 	#$55D5
.01043d	85 16		sta $16				sta 	DRandom+2
.01043f					_Rnd_Exit:
.01043f	a5 14		lda $14				lda 	DRandom
.010441	45 16		eor $16				eor 	DRandom+2
.010443	60		rts				rts

;******  Return to file: ..\source\basic.asm

.010444					SwitchBasicInstance:
.010444	c2 30		rep #$30		rep 	#$30 									; 16 bit AX mode.
.010446	29 ff 00	and #$00ff		and 	#$00FF 									; make page number 24 bit
.010449	85 00		sta $00			sta 	DPageNumber 							; save page, base, high
.01044b	86 02		stx $02			stx		DBaseAddress
.01044d	84 04		sty $04			sty 	DHighAddress
.01044f	eb		xba			xba 											; put the page number (goes in the DBR) in B
.010450	48		pha			pha 											; then copy it into B.
.010451	ab		plb			plb
.010452	ab		plb			plb
.010453	a9 c8 40	lda #$40c8		lda 	#$40C0+8 								; initialise Code Pointer
.010456	85 06		sta $06			sta 	DCodePtr
.010458	20 8f 00	jsr $01008f		jsr 	Evaluate 								; evaluate it.
.01045b	ea		nop			nop
.01045c					halt1:
.01045c	02 00		cop #$00		cop 	#0
.01045e	80 fc		bra $01045c		bra 	halt1

;******  Return to file: ..\source\start.asm

.024000					CodeSpace:
>024000	42 41 53 43 00 00 00 00			.binary "temp/basic.bin"
>024008	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 6 times (96 bytes)...
>024078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 e0 40
>024088	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>024098	00 00 e8 40 00 00 00 00 f0 40 ee bf 00 00 00 00
>0240a8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>0240b8	00 00 00 00 00 00 00 00 1a 00 0a 80 38 20 06 44
>0240c8	2a 80 0c 4c 17 74 08 00 68 65 6c 6c 6f 00 1c 78
>0240d8	00 00 00 00 ee ee ee ee 00 00 fe bf 2a 00 00 00
>0240e8	00 00 fa bf ee bf 00 00 00 00 00 00 00 00 00 00
>0240f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 2030 times (32480 bytes)...
>02bfe8	00 00 00 00 00 00 2a e2 00 00 2a e2 01 00 2a e2
>02bff8	02 00 a1 3c 72 24 77 24
.02c000					CodeEndSpace:

;******  End of listing
